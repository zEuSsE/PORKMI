/*
 * provaEsecuzione.cpp
 *
 *  Created on: 30/gen/2012
 *      Author: andrea
 */

#include <kernel/kernel-matrix.h>
#include <kernel/matrix.h>
#include <util/labeled-index.h>
#include <iostream>
#include <fstream>
#include <experiment/random-selector.h>
#include <vector>
#include <svm/svm.h>
#include <experiment/svm-experiment.h>
#include <time.h>




using namespace libpmk;
using namespace libpmk_util;
using namespace std;

int leggereLabeledIndexFileI( vector<int>* labeledIndexList,string pathENomeFile);
vector<LabeledIndex > leggiFileSET(string dataSetPath);
double faiProvaSvmTornaAccuracy(string kernelMatrix, string trainingSet, string testSet);

int main() {
time_t tempo_start,tempo_end;

	time(&tempo_start);
	cout<<"KM_10_2_0_1_1.ker:\n";
		faiProvaSvmTornaAccuracy("/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/Kernel/KM_10_2_0_1_1.ker",
					"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/trainingSet_ETH80.set",
					"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/finalTestSet_ETH80.set");
	time(&tempo_end);

	cout<<"\nKM_10_2_3_1_1.ker:\n";
	faiProvaSvmTornaAccuracy("/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/Kernel/KM_10_2_3_1_1.ker",
				"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/trainingSet_ETH80.set",
				"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/finalTestSet_ETH80.set");

	cout<<"\nKM_100_5_0_1_1.ker:\n";
	faiProvaSvmTornaAccuracy("/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/Kernel/KM_100_5_0_1_1.ker",
					"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/trainingSet_ETH80.set",
					"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/finalTestSet_ETH80.set");

	cout<<"\nKM_200_10_0_1_1.ker:\n";
		faiProvaSvmTornaAccuracy("/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/Kernel/KM_200_10_0_1_1.ker",
						"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/trainingSet_ETH80.set",
						"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/finalTestSet_ETH80.set");


		cout<<"\nKM_1000_20_0_1_1.ker:\n";
			faiProvaSvmTornaAccuracy("/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/Kernel/KM_1000_20_0_1_1.ker",
							"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/trainingSet_ETH80.set",
							"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/finalTestSet_ETH80.set");


			cout<<"\nKM_1000_20_1_1_1.ker:\n";
				faiProvaSvmTornaAccuracy("/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/Kernel/KM_1000_20_1_1_1.ker",
								"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/trainingSet_ETH80.set",
								"/home/andrea/Scrivania/Progetto/DATASET_ETH80/GridSIFT/suddivisioneDataSet/finalTestSet_ETH80.set");



}


int leggereLabeledIndexFileI( vector<int>* labeledIndexList,string pathENomeFile){

	int* labInd;
	ifstream myFile;
	int numImmagini;
	cout<<"Reading the file info: "<<pathENomeFile<<"\n";
	myFile.open(pathENomeFile.c_str());

	if (myFile.is_open()) {
		myFile>>numImmagini;
		//cout<< numImmagini<<"\n";
		for(int i=0;i<numImmagini;i++){

			labInd=new int();

			myFile>>*labInd;
			labeledIndexList->push_back(*labInd);

					//	 cout<<*labInd<<"\n";

		}
	}
	else cerr<<"\nFILE NON TROVATO: "<<pathENomeFile<<"\n";
	myFile.close();

	return numImmagini;
}



vector<LabeledIndex > leggiFileSET(string dataSetPath){
	vector<LabeledIndex > dataSet;
	LabeledIndex labeledIndextmp;
	ifstream dataSetFile (dataSetPath.c_str(), ios::in);
	if (dataSetFile.is_open()){
		int index;
		int label;
		dataSetFile >> index;
		dataSetFile >> label;
		while (dataSetFile.eof()!=true){
			//cout << "Indice:"<<index<<" Label:"<<label<< endl;
			labeledIndextmp.index=index;
			labeledIndextmp.label=label;
			dataSet.push_back(labeledIndextmp);
			dataSetFile >> index;
			dataSetFile >> label;
		}
	}

	else cout<< endl <<"File non trovato"<< endl;


	return dataSet;
}

double faiProvaSvmTornaAccuracy(string kernelMatrix, string trainingSet, string testingSet){

	KernelMatrix* matriceKernel= new KernelMatrix();
		matriceKernel->ReadFromFile(kernelMatrix.c_str());

		/*
		vector<int>* labels= new vector<int>();
		int numIm=leggereLabeledIndexFileI(labels,"/home/andrea/Scrivania/Progetto/DATASET_ETH80/ETH80_labels.txt" );
		//cout<<"\n\n" <<numIm;
		RandomSelector rS(*labels, 40);

		vector<LabeledIndex>* liv=new vector<LabeledIndex>();
		*liv=rS.GetTrainingExamples();
		*/
		vector<LabeledIndex > trainSet=leggiFileSET(trainingSet);
		vector<LabeledIndex > testSet=leggiFileSET(testingSet);


		SVMExperiment* svme=new SVMExperiment(trainSet, testSet,*matriceKernel,0.000000000001);
		svme->Train();
		int numCorrect=svme->Test();
		cout<<"numCorrect= "<<numCorrect<<";\n Accuratezza:"<<svme->GetAccuracy();

		return svme->GetAccuracy();



}
